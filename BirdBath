/*  Definitions */
#define  TASK_STK_SIZE 256         // Size of each task's stacks (# of bytes)
#define  PotMax 1031 // Maximum POT position reading
#define PotMin 2088 // Minimum POT position reading
#define IrVmax 1500 // Maximum IR Sesnor reading
#define IrVmin 1990 // Minimum IR Sensor reading
#define  MAX_COUNT 100
#define ON 1 // Both experimental, and development board work on an active low configuration
#define OFF 0 // Both experimental, and development board work on an active low configuration
#define N_TASKS 5 // Number of tasks
#define dt 0.006 //i randomly picked a low time step value

// Redefine uC/OS-II configuration constants as necessary
 #define  OS_MAX_EVENTS 2           // Maximum number of events (semaphores, queues, mailboxes)
#define  OS_MAX_TASKS 11          // Maximum number of tasks system can create (less stat and idle tasks)
#define  OS_TASK_STAT_EN 1           // Enable statistics task creation
#define  OS_TICKS_PER_SEC128         // Number of Ticks per second /* Other Definitions */
#define POT_CHAN 0                    // channel 0 of ADC (ADC0)
#define IRS_CHAN 1 // channel 1 of ADC (ADC1) #define MOT_CHAN 1                    // channel 1 of digital output (OUT1)
#define MAX_PWIDTH 1000                // the maximum pulse width in TMRB clock cycles
#define MIN_PWIDTH 50                 // the maximum pulse width in TMRB clock cycles
#define STDIO_DISABLE_FLOATS

/* Variable declarations */
char TMRB_MSB;    // this 8-bit value will be written to TBM2R (bits 8 and 9 of TMRB2 match register)
char TMRB_LSB;    // this 8-bit value will be written to TBL2R (bits 0 to 7 of TMRB2 match register)
int PulseWidth;                         // Duty Cycle of the PWM signal
float PotNorm; // Scaled value of the POT reading
int plotData;
int IrSen;
float IrNorm;
float ErrSig;
float previousError;
float Kp;
float Ki;
float Kd;
int Kp100;
int Ki100;
int Kd100;
float proportional;
float integral;
float derivitive;
float sum;
int PWidth;
int step;
char TMRB_10_count;            // This variable is incremented at the beginning of every PWM cycle. When it is equal to ten, it is reset to zero, and duty cycle values are calculated from updated ADC input.                                          // The value is updated in the Timer B ISR to either 1 during the duty cycle or 0 for remainder. #use "ucos2.lib" UBYTE TaskData[N_TASKS];      // Parameters to pass to each task
OS_EVENT *ADCSem;              // Semaphore to access ADC
void  InitializeTimers();     // Setup Timer A and B interrupts
void  CalculateDutyCycle();   // Update the duty cycle
void  Tmr_B_ISR();            // Timer B interrupt service routine void
ShowStat();                   // Display update
void  DispStr(int x, int y, char *s);
float normalize(int value,int min, int max);
void  TaskInput(void *data); // Function prototypes of the task
void TaskControl (void *data); // Function prototypes of the task
void  TaskStart(void *data);              // Function prototype of startup task
void TaskLogging (void *data); // Function prototypes of the task
void TaskInterface (void *data); // Function prototypes of the task




void main (void) {
sum = 0;
previousError = 0;
//Inialize gain values after tuning
Kp = 0.1417;
Ki = 0.1288;
Kd = 0.0935;
// Kp = 0.081;
//Ki = 0.07229;
//Kd = 0.0605;
plotData = 0;
step = 0;
brdInit();                  // Initialize MCU board
OSInit();                  // Initialize uC/OS-II
ADCSem = OSSemCreate(1);  // Semaphores for ADC inputs
OSTaskCreate(TaskStart, (void *)0, TASK_STK_SIZE, 10);   OSStart();        // Start multitasking
 }
void TaskStart (void *data) {
  OSStatInit();
  OSTaskCreate(TaskInput, (void *)&TaskData[1], TASK_STK_SIZE, 11);
  OSTaskCreate(TaskControl, (void *)&TaskData[2], TASK_STK_SIZE, 5);
  OSTaskCreate(TaskLogging, (void *)&TaskData[3], TASK_STK_SIZE, 12);
  OSTaskCreate(TaskInterface, (void *)&TaskData[4], TASK_STK_SIZE, 13);
  InitializeTimers();
   for (;;) {
     //ShowStat();  //we dont care
     OSTimeDly(OS_TICKS_PER_SEC);     // Wait one second
   }
 }


nodebug void TaskLogging (void *data) {
  char display[64];
  int inputSingal;
  int outputSignal;
  int ErrSignal;
  for(;;)   {
    if(plotData == 1)
    {
      inputSingal = (int)(PotNorm * 100);
      outputSignal = (int)(IrNorm * 100);
      ErrSignal =  (int)(ErrSig * 100);
      sprintf(display,"%d %d %d;\n",inputSingnal, outputSignal,ErrSignal);
      printf ("%s", display);
    }
    else
    {
      Kp100 = Kp*100;
      Ki100 = Ki*1000;
      Kd100 = Kd*1000;
      sprintf(display,"Pot Norm: %d perC   PWidth: %d  \n",(int) (PotNorm * 100), PWidth);
      printf ("%s", display);
      sprintf(display,"Kp: %d   Ki: %d    Kd: %d; \n",Kp100 ,Ki100,Kd100);
      printf ("%s", display);
    }
    OSTimeDly(15);
  }
}


nodebug void TaskInterface (void *data) {
  char Key;
  char display[64];
  for(;;)   {
          if (kbhit())
          {// See if key has been pressed
            Key = getchar();
            sprintf(display, "Key: %d \n",(int)Key);
            printf("%s", display);
            if (Key == 49) // check if 1 is clicked on the number pad
            {
              Kp -=0.02; //increase Kp by 0.05 if 1 is clicked.
            }
            else if (Key == 52) // check if 4 is clicked
            {
              Kp +=0.001; //decrease Kp by 0.05 if 4 is clicked.
            }
            else if (Key == 55)
            {
              Kp +=0.02; //decrease Kp by 0.05 if 4 is clicked.
            }
            else if (Key == 56)
            {
              Kp -=0.001; //decrease Kp by 0.05 if 4 is clicked.
            }
            if (Key == 50) // check if 2 is clicked
            {
              Ki -=0.001; //increase Kp by 0.001 if 2 is clicked.
            }
            else if (Key == 53) // check if 5 is clicked
            {
              Ki +=0.001; //decrease Kp by 0.001 if 5 is clicked.
            }
            if (Key == 51) // check if 3 is clicked
            {
              Kd -=0.001; //increase Kp by 0.001 if 3 is clicked.
            }
            else if (Key == 54) // check if 6 is clicked
            {
              Kd +=0.001; //decrease Kp by 0.001 if 6 is clicked.
            }
            if (Key == 112 && plotData == 0)//"p"
            {
              plotData = 1;
            }
            else if (Key == 112 && plotData == 1)
            {
              plotData = 0;
            }
            if (Key == 115 && step == 0)//"s"
            {
              step = 1;
            }
            else if (Key == 115 && step == 1)
            {
              step = 0;
            }
          }
          else
          {
            sprintf(display, "No Key Pressed \n");
            printf("%s", display);
          }

      OSTimeDly(OS_TICKS_PER_SEC);
      }
    }


nodebug void TaskInput (void *data) //Taks for collecting data from sensors
{
  auto UBYTE err;
  int PotRead;
  for(;;) {
    OSSemPend(ADCSem, 0, &err);
    PotRead = anaIn(POT_CHAN); // Read POT and IR output voltage
    IrSen = anaIn(IRS_CHAN);
      OSSemPost(ADCSem);
      PotNorm = normalize(PotRead,PotMin,PotMax);
      OSTimeDly(1);
    }
  }


nodebug void TaskControl (void *data) {
  auto UBYTE err;
  int temp;
  char display[64];
  float irLinearized;   //water doesnt start moving until minimum PWM
  double minimumPW;
  double maximumPW;   //MAX_PWIDTH and MIN are used to not break the system
   for (;;) {   temp = (PotNorm * 1023);
         //IR piecewise relationship (for non-linearity accounting)
         if (IrSen < 1950)
         {
           irLinearized = 2.92 * (1950 - IrSen);
         }
         else
         {
           irLinearized = 0.31 * (2000 - IrSen);
         }
         IrNorm = normalize(IrSen,IrVmin,IrVmax);
         irLinearized = normalize(irLinearized, 0, 1028);
         //sprintf(display,"%d  %f  %f;\n",IrSen, irLinearized, IrNorm);
         IrNorm = irLinearized;         //printf ("%s", display);
         if (step == 1)
         {
           PotNorm = 0.3;
           //sprintf(display,"%d  %f  %f;\n",IrSen, irLinearized, PotNorm);
           //printf ("%s", display);
         }

         ErrSig = (PotNorm - IrNorm);
         //getting variables of the discrete time implementation of PID controller.
         proportional = Kp * ErrSig;
         sum = sum+(dt * ErrSig); //dt is the time between samples
         integral = sum* Ki;
         derivitive = Kd*((ErrSig - previousError)/dt);
         previousError = ErrSig;
         minimumPW = 0.71; // 71% Duty Cycle
         maximumPW = 1023; //total counts in the duty cycle
         PWidth = (int)((minimumPW + proportional + integral + derivitive) * maximumPW); // new commanded Pulse Width / duty cycle based on the discrete PID formula
         //sprintf(display, "PWidth: %d,  Pot Norm: %d perC   Error Norm : %d perC", PWidth,(int)((minimumPW + Kp * ErrSig) * 100),(int) (ErrSig * 100));
         // Write POT voltage on STDIO
         //DispStr(22, 10, display);
         if (PWidth > MAX_PWIDTH){PWidth = MAX_PWIDTH;}
         if (PWidth < MIN_PWIDTH){PWidth = MIN_PWIDTH;}
         TMRB_LSB  = (char)PWidth;
         TMRB_MSB = (char)(PWidth >> 2);
      OSTimeDly(1);
// Delay the task
      } }
float normalize(int val,int minimum, int max) //normalizes the  measured value based on measured value,maximum sensor value and minimum sensor value.
{
  float norm;
  n = (double)(val - minimum)/(double)(max - minimum);
  if (n > 1.0)
  {
    norm = 1.0;
  }
  if (norm < 0.0)
 {
   norm = 0.0;
 }
 return norm;
}

nodebug root interrupt void Tmr_B_ISR() {
  char TMRB_status;
  TMRB_status = RdPortI(TBCSR); // Read-out and clear interrupt status flags
  if(TMRB_status & 0x02){ // A new PWM cycle, if Match 1 reg is triggered
    digOut(MOT_CHAN, ON); // Set PWM output high
    WrPortI(TBM1R, NULL, 0x00); // set up Match 1 reg to interrupt at the begining of the next cycle
    WrPortI(TBL1R, NULL, 0x00); // set up Match 1 reg to interrupt at the begining of the next cycle
  }
  else if(TMRB_status & 0x04){ // If Match 2 reg is triggered, output will be low for the rest of the cycle
    digOut(MOT_CHAN, OFF); // Set PWM output low */
    // Drop output flag to 0
    WrPortI(TBM2R, NULL, TMRB_MSB); // set up Match 2 reg to corespond with duty cycle
    WrPortI(TBL2R, NULL, TMRB_LSB); // set up Match 2 reg to corespond with duty cycle
  }
  OSIntExit();
}
void InitializeTimers() {
  TMRB_MSB = 0x40;
// Initialize TMRB2 match register to coincide with 50% duty cycle
TMRB_LSB = 0xFF; // Initialize TMRB2 match register to coincide with 50% duty cycle
TMRB_10_count = 0; // Initialize the Timer B interrupt counter (PWM cycle counter) to zero
   /* Setup Timer A */
   WrPortI(TAT1R, &TAT1RShadow, 0xFF); // set TMRA1 to count down from 255
   WrPortI(TACR, &TACRShadow, 0x00); // Disable TMRA interrupts (TMRA used only to clock TMRB)
  WrPortI(TACSR, &TACSRShadow, 0x01); // Enable main clock (PCLK/2) for TMRA1
   /* set up Timer B for generating PWM */
   SetVectIntern(0x0b, Tmr_B_ISR);
   // set up timer B interrupt vector
   WrPortI(TBCR, &TBCRShadow, 0x05);
   // clock timer B with TMRA1 to priority 1 interrupt
   WrPortI(TBM1R, NULL, 0x00);
   // set up match register 1 to 0x00
   WrPortI(TBL1R, NULL, 0x00);
   // set up match register 1 to 0x00
   WrPortI(TBM2R, NULL, TMRB_MSB);
   // set up match register 2 to to give an initial 50% duty cycle
   WrPortI(TBL2R, NULL, TMRB_LSB);
   // set up match register 2 to to give an initial 50% duty cycle
   WrPortI(TBCSR, &TBCSRShadow, 0x07);
   // enable Timer B to interrupt on B1 and B2 match
 }
